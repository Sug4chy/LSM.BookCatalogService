// <auto-generated />
using System;
using System.Collections.Generic;
using LSM.BookCatalogService.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LSM.BookCatalogService.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240714135708_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<Dictionary<string, string>>("ContactInformation")
                        .HasColumnType("jsonb")
                        .HasColumnName("contact_information");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("death_date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("full_name");

                    b.Property<string>("ShortBiography")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("short_biography");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.ToTable("author", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBook", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Annotation")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("annotation");

                    b.Property<int?>("AvailableCount")
                        .HasColumnType("integer")
                        .HasColumnName("available_count");

                    b.Property<int?>("CountInLibrary")
                        .HasColumnType("integer")
                        .HasColumnName("count_in_library");

                    b.Property<int>("Discriminator")
                        .HasColumnType("integer")
                        .HasColumnName("discriminator");

                    b.Property<string>("FilePath")
                        .HasMaxLength(32767)
                        .HasColumnType("character varying(32767)")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_available");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("isbn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("integer")
                        .HasColumnName("pages_count");

                    b.Property<Guid>("PublishingHouseId")
                        .HasColumnType("uuid");

                    b.Property<short>("PublishingYear")
                        .HasColumnType("smallint")
                        .HasColumnName("publishing_year");

                    b.Property<Guid?>("VoiceActorId")
                        .HasColumnType("uuid")
                        .HasColumnName("voice_actor_id");

                    b.HasKey("Id");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PublishingHouseId");

                    b.HasIndex("VoiceActorId");

                    b.ToTable("book", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBookCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("book_category", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseIllustration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(32767)
                        .HasColumnType("character varying(32767)")
                        .HasColumnName("file_path");

                    b.Property<Guid>("IllustratorId")
                        .HasColumnType("uuid")
                        .HasColumnName("illustrator_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("FilePath")
                        .IsUnique();

                    b.HasIndex("IllustratorId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("illustration", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseIllustrator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<Dictionary<string, string>>("ContactInformation")
                        .HasColumnType("jsonb")
                        .HasColumnName("contact_information");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("death_date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("full_name");

                    b.Property<string>("ShortBiography")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("short_biography");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.ToTable("illustrator", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePortrait", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<int>("Discriminator")
                        .HasColumnType("integer")
                        .HasColumnName("discriminator");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(32767)
                        .HasColumnType("character varying(32767)")
                        .HasColumnName("file_path");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("FilePath")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("portrait", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePortraitCreator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<Dictionary<string, string>>("ContactInformation")
                        .HasColumnType("jsonb")
                        .HasColumnName("contact_information");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("death_date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("full_name");

                    b.Property<string>("ShortBiography")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("short_biography");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.ToTable("portrait_creator", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePublishingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("IsbnCode")
                        .HasMaxLength(13)
                        .HasColumnType("smallint")
                        .HasColumnName("isbn_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("IsbnCode")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("publishing_house", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseVoiceActor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<Dictionary<string, string>>("ContactInformation")
                        .HasColumnType("jsonb")
                        .HasColumnName("contact_information");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("death_date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("full_name");

                    b.Property<string>("ShortBiography")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("short_biography");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.ToTable("voice_actor", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.Helpers.DatabaseAuthorBook", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("author_book", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.Helpers.DatabaseBookCategoryBook", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("book_category_book", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.Helpers.DatabaseBookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("book_genre", (string)null);
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseAuthor", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseCountry", "Country")
                        .WithMany("Authors")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBook", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePublishingHouse", "PublishingHouse")
                        .WithMany("Books")
                        .HasForeignKey("PublishingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseVoiceActor", "VoiceActor")
                        .WithMany("AudioBooks")
                        .HasForeignKey("VoiceActorId");

                    b.Navigation("PublishingHouse");

                    b.Navigation("VoiceActor");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseIllustration", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBook", "Book")
                        .WithMany("Illustrations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseIllustrator", "Illustrator")
                        .WithMany("Illustrations")
                        .HasForeignKey("IllustratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Illustrator");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseIllustrator", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseCountry", "Country")
                        .WithMany("Illustrators")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePortrait", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseAuthor", "Author")
                        .WithOne("Portrait")
                        .HasForeignKey("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePortrait", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePortraitCreator", "Creator")
                        .WithMany("Portraits")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePortraitCreator", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseCountry", "Country")
                        .WithMany("PortraitCreators")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseVoiceActor", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseCountry", "Country")
                        .WithMany("VoiceActors")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.Helpers.DatabaseAuthorBook", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseAuthor", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBook", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.Helpers.DatabaseBookCategoryBook", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBook", "Book")
                        .WithMany("Categories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBookCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.Helpers.DatabaseBookGenre", b =>
                {
                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBook", "Book")
                        .WithMany("Genres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseGenre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseAuthor", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Portrait");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBook", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Categories");

                    b.Navigation("Genres");

                    b.Navigation("Illustrations");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseBookCategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseCountry", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Illustrators");

                    b.Navigation("PortraitCreators");

                    b.Navigation("VoiceActors");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseGenre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseIllustrator", b =>
                {
                    b.Navigation("Illustrations");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePortraitCreator", b =>
                {
                    b.Navigation("Portraits");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabasePublishingHouse", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LSM.BookCatalogService.Infrastructure.Persistance.Models.DatabaseVoiceActor", b =>
                {
                    b.Navigation("AudioBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
